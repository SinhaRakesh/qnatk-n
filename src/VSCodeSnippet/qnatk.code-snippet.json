{
	"Snippet before create": {
		"prefix": "new_qnatk_before_createHook",
		"body": [
			"import { Injectable } from '@nestjs/common';",
			"import { QNATKIBeforeHookParams } from 'src/qnatk/src';",
			"import { BaseHook } from 'src/qnatk/src/hooks/base-hook';",
			"// import { ${2:payload_dto_class} } from './${1:payload_dto}';",
			"",
			"@Injectable()",
			"export class BeforeCreateModel extends BaseHook {",
			"protected autoDtoFileName = '${1:payload_dto}'; // DTO file name separated by (/)slashes for folder paths",
			"",
			"async execute(previousData: QNATKIBeforeHookParams</** ${2:payload_dto_class} */ any, /** ${3:user_DTO} */ any>): Promise<any> {",
			"// constructor(private readonly serviceAlias: importedService) {}",
			"",
			"// used for auto-generate DTO",
			"// this.checkAndGenerateDto(previousData.data,${2:payload_dto_class});",
			"",
			"// previousData.data = await this.validateData(previousData.data,${2:payload_dto_class});",
			"",
			"// your logic here",
			"$0",
			"",
			"//  { ...previousData } // sending appended data to",
			"return previousData;",
			"}",
			"}",
		],
		"description": "Snippet for before create hook"
	},
	"Snippet create": {
		"prefix": "new_qnatk_create_Hook",
		"body": [
			"import { Injectable } from '@nestjs/common';",
			"import { QNATKIBeforeHookParams } from 'src/qnatk/src';",
			"import { BaseHook } from 'src/qnatk/src/hooks/base-hook';",
			"// import { ${2:payload_dto_class} } from './${1:payload_dto}';",
			"// file name must start from `execute:create:modelName`",
			"@Injectable()",
			"export class executeCreate extends BaseHook {",
			"protected autoDtoFileName = '${1:payload_dto}'; // DTO file name separated by (/)slashes for folder paths",
			"",
			"async execute(previousData: QNATKIBeforeHookParams</** ${2:payload_dto_class} */ any, /** ${3:user_DTO} */ any>): Promise<any> {",
			"// constructor(private readonly serviceAlias: importedService) {}",
			"",
			"// used for auto-generate DTO",
			"// this.checkAndGenerateDto(previousData.data,${2:payload_dto_class});",
			"",
			"// previousData.data = await this.validateData(previousData.data,${2:payload_dto_class});",
			"",
			"// your logic here",
			"$0",
			"",
			"//  { ...previousData } // sending appended data to",
			"return previousData;",
			"}",
			"}",
		],
		"description": "Snippet for before create hook"
	},
	"Snippet after create": {
		"prefix": "new_qnatk_after_createHook",
		"body": [
			"import { Injectable } from '@nestjs/common';",
			"import { QNATKIAfterHookParams } from 'src/qnatk/src';",
			"import { BaseHook } from 'src/qnatk/src/hooks/base-hook';",
			"// import { ${3:record_dto_class} } from './${1:record_dto}';",
			"",
			"@Injectable()",
			"export class AfterCreateModel extends BaseHook {",
			"protected autoDtoFileName = '${1:record_dto}'; // DTO file name separated by (/)slashes for folder paths",
			"",
			"async execute(previousData: QNATKIAfterHookParams<${2:modelType},/** ${3:record_dto_class} */ any, /** ${4:user_DTO} */ any>): Promise<any> {",
			"// constructor(private readonly serviceAlias: importedService) {}",
			"",
			"// used for auto-generate DTO",
			"// this.checkAndGenerateDto(previousData.data,${3:record_dto_class});",
			"",
			"// previousData.data = await this.validateData(previousData.data,${3:record_dto_class});",
			"",
			"// your logic here",
			"$0",
			"",
			"//  { ...previousData } // sending appended data to",
			"return previousData;",
			"}",
			"}",
		],
		"description": "Snippet for before create hook"
	},
	"Snippet before list": {
		"prefix": "new_qnatk_before_list_execute_hook",
		"body": [
			"import { Injectable } from '@nestjs/common';",
			"import { QnatkListDTO } from 'src/qnatk/src';",
			"import { BaseHook } from 'src/qnatk/src/hooks/base-hook';",
			"",
			"@Injectable()",
			"export class beforeExecuteList extends BaseHook {",
			"",
			"async execute(previousData: {fetchOptions:QnatkListDTO,userDTO:any}): Promise<any> {",
			"",
			"// previousData.fetchOptions",
			"// your logic here",
			"$0",
			"",
			"//  { ...previousData } // sending appended data to",
			"return previousData;",
			"}",
			"}",
		],
		"description": "Snippet for before create list of model"
	},
	"Snippet execute list": {
		"prefix": "new_qnatk_list_execute_hook",
		"body": [
			"import { Injectable } from '@nestjs/common';",
			"import { QnatkListDTO } from 'src/qnatk/src';",
			"import { BaseHook } from 'src/qnatk/src/hooks/base-hook';",
			"",
			"// this file name must be start with `execute:list-`",
			"@Injectable()",
			"export class executeList extends BaseHook {",
			"",
			"async execute(previousData: {fetchOptions:QnatkListDTO,userDTO:any}): Promise<any> {",
			"",
			"// previousData.fetchOptions",
			"// your logic here",
			"$0",
			"",
			"//  { ...previousData } // sending appended data to",
			"return previousData;",
			"}",
			"}",
		],
		"description": "Snippet for before create list of model"
	},
	"Snippet after list": {
		"prefix": "new_qnatk_after_list_execute_hook",
		"body": [
			"import { Injectable } from '@nestjs/common';",
			"import { QnatkListDTO } from 'src/qnatk/src';",
			"import { BaseHook } from 'src/qnatk/src/hooks/base-hook';",
			"",
			"// this file name must be start with `execute:list-`",
			"@Injectable()",
			"export class afterExecuteList extends BaseHook {",
			"",
			"async execute(previousData: {data:any,fetchOptions:QnatkListDTO,userDTO:any}): Promise<any> {",
			"",
			"// previousData.fetchOptions",
			"// your logic here",
			"$0",
			"",
			"//  { ...previousData } // sending appended data to",
			"return previousData;",
			"}",
			"}",
		],
		"description": "Snippet for before create list of model"
	},
	"Snippet before list and count": {
		"prefix": "new_qnatk_before_listAndCount_hook",
		"body": [
			"import { Injectable } from '@nestjs/common';",
			"import { QNATKIILACBefore } from 'src/qnatk/src';",
			"import { BaseHook } from 'src/qnatk/src/hooks/base-hook';",
			"",
			"@Injectable()",
			"export class beforeExecuteListAndCount extends BaseHook {",
			"",
			"async execute(previousData: QNATKIILACBefore): Promise<any> {",
			"",
			"// previousData.fetchOptions",
			"// your logic here",
			"$0",
			"",
			"//  { ...previousData } // sending appended data to",
			"return previousData;",
			"}",
			"}",
		],
		"description": "Snippet for before create list of model"
	},
	"Snippet execute list and count": {
		"prefix": "new_qnatk_listAndCount_execute_hook",
		"body": [
			"import { Injectable } from '@nestjs/common';",
			"import { QNATKIILACExecute } from 'src/qnatk/src';",
			"import { BaseHook } from 'src/qnatk/src/hooks/base-hook';",
			"",
			"// this file name must be start with `execute:lac-`, ie `execute:lac-hookname:modelname`",
			"@Injectable()",
			"export class executeListAndCount extends BaseHook {",
			"",
			"async execute(previousData: QNATKIILACExecute): Promise<any> {",
			"",
			"// previousData.fetchOptions",
			"// your logic here",
			"$0",
			"",
			"//  { ...previousData } // sending appended data to",
			"return previousData;",
			"}",
			"}",
		],
		"description": "Snippet for before create list of model"
	},
	"Snippet after list and count ": {
		"prefix": "new_qnatk_after_listAndCount_execute_hook",
		"body": [
			"import { Injectable } from '@nestjs/common';",
			"import { QNATKIILACAfter } from 'src/qnatk/src';",
			"import { BaseHook } from 'src/qnatk/src/hooks/base-hook';",
			"",
			"@Injectable()",
			"export class afterExecuteListAndCount extends BaseHook {",
			"async execute(previousData: QNATKIILACAfter<any, any>): Promise<any> {",
			"// previousData = { count, fetchOptions, rows, user }",
			"",
			"// your logic here",
			"$0",
			"",
			"//  { ...previousData } // sending appended data to",
			"return previousData;",
			"}",
			"}",
		],
		"description": "Snippet for before create list of model"
	},
	"Snippet before create with files": {
		"prefix": "new_qnatk_before_creat_with_files_eHook",
		"body": [
			"import { Injectable } from '@nestjs/common';",
			"import { QNATKIBeforeHookParamsWithFiles } from 'src/qnatk/src';",
			"import { BaseHook } from 'src/qnatk/src/hooks/base-hook';",
			"// import { ${2:payload_dto_class} } from './${1:payload_dto}';",
			"",
			"@Injectable()",
			"export class BeforeCreateWithFiles extends BaseHook {",
			"protected autoDtoFileName = '${1:payload_dto}'; // DTO file name separated by (/)slashes for folder paths",
			"",
			"async execute(previousData: QNATKIBeforeHookParamsWithFiles</** ${2:payload_dto_class} */ any, /** ${3:user_DTO} */ any>): Promise<any> {",
			"// constructor(private readonly serviceAlias: importedService) {}",
			"// const { data, user, files } = previousData;",
			"// used for auto-generate DTO",
			"// this.checkAndGenerateDto(previousData.data,${2:payload_dto_class});",
			"",
			"// previousData.data = await this.validateData(previousData.data,${2:payload_dto_class});",
			"",
			"// your logic here",
			"$0",
			"",
			"//  { ...previousData } // sending appended data to",
			"return previousData;",
			"}",
			"}",
		],
		"description": "Snippet: before create with files"
	},
	"Snippet create with files": {
		"prefix": "new_qnatk_create_with_files_Hook",
		"body": [
			"import { Injectable } from '@nestjs/common';",
			"import { QNATKIBeforeHookParamsWithFiles } from 'src/qnatk/src';",
			"import { BaseHook } from 'src/qnatk/src/hooks/base-hook';",
			"// import { ${2:payload_dto_class} } from './${1:payload_dto}';",
			"// file name must start from `execute:create:modelName`",
			"@Injectable()",
			"export class executeCreateWithFiles extends BaseHook {",
			"protected autoDtoFileName = '${1:payload_dto}'; // DTO file name separated by (/)slashes for folder paths",
			"",
			"async execute(previousData: QNATKIBeforeHookParamsWithFiles</** ${2:payload_dto_class} */ any, /** ${3:user_DTO} */ any>): Promise<any> {",
			"// constructor(private readonly serviceAlias: importedService) {}",
			"",
			"// used for auto-generate DTO",
			"// this.checkAndGenerateDto(previousData.data,${2:payload_dto_class});",
			"",
			"// previousData.data = await this.validateData(previousData.data,${2:payload_dto_class});",
			"",
			"// your logic here",
			"$0",
			"",
			"//  { ...previousData } // sending appended data to",
			"return previousData;",
			"}",
			"}",
		],
		"description": "Snippet for before create hook"
	},
	"Snippet after create with files": {
		"prefix": "new_qnatk_after_creat_with_files_eHook",
		"body": [
			"import { Injectable } from '@nestjs/common';",
			"import { QNATKIAfterHookParamsWithFiles } from 'src/qnatk/src';",
			"import { BaseHook } from 'src/qnatk/src/hooks/base-hook';",
			"// import { ${3:record_dto_class} } from './${1:record_dto}';",
			"",
			"@Injectable()",
			"export class AfterCreateWithFiles extends BaseHook {",
			"protected autoDtoFileName = '${1:record_dto}'; // DTO file name separated by (/)slashes for folder paths",
			"",
			"async execute(previousData: QNATKIAfterHookParamsWithFiles<${2:modelType},/** ${3:record_dto_class} */ any, /** ${4:user_DTO} */ any>): Promise<any> {",
			"// constructor(private readonly serviceAlias: importedService) {}",
			"",
			"// used for auto-generate DTO",
			"// this.checkAndGenerateDto(previousData.data,${3:record_dto_class});",
			"",
			"// previousData.data = await this.validateData(previousData.data,${3:record_dto_class});",
			"",
			"// your logic here",
			"$0",
			"",
			"//  { ...previousData } // sending appended data to",
			"return previousData;",
			"}",
			"}",
		],
		"description": "Snippet: before create with files"
	},
	"Snippet before action execute": {
		"prefix": "new_qnatk_before_action_execute",
		"body": [
			"import { Injectable } from '@nestjs/common';",
			"import { QNATKIBeforeActionExecuteParams } from 'src/qnatk/src';",
			"import { BaseHook } from 'src/qnatk/src/hooks/base-hook';",
			"import { InjectModel } from '@nestjs/sequelize';",
			"// import { ${2:payload_DTO_class} } from './${1:payload_DTO_path}';",
			"@Injectable()",
			"export class beforeActionExecute extends BaseHook {",
			"protected autoDtoFileName = '${1:payload_DTO_path}'; // DTO file name separated by (/)slashes for folder paths",
			"constructor(",
			" @InjectModel( ${3:modelName}, '${3:modelName}' )",
			" private readonly ${3:modelName}Model: typeof ${3:modelName}",
			" ) { super(); }",
			"",
			"async execute(previousData: QNATKIBeforeActionExecuteParams<${3:modelName},/** ${2:payload_DTO_class} */ any,/** ${4:user_DTO} */ any>): Promise<any> {",
			"// used for auto-generate DTO",
			"// this.checkAndGenerateDto(previousData.data,${2:payload_DTO_class});",
			"",
			"// previousData.data = await this.validateData(previousData.data,${2:payload_DTO_class});",
			"",
			"// your logic here",
			"$0",
			" return previousData;",
			"",
			"}",
			"}",
			"$0"
		],
		"description": "Snippet before action execute"
	},
	"Snippet action execute": {
		"prefix": "new_qnatk_action_execute",
		"body": [
			"import { Injectable } from '@nestjs/common';",
			"import { QNATKIActionExecuteParams } from 'src/qnatk/src';",
			"import { BaseHook } from 'src/qnatk/src/hooks/base-hook';",
			"import { InjectModel } from '@nestjs/sequelize';",
			"// import { ${2:payload_DTO_class} } from './${1:payload_DTO_path}';",
			"@Injectable()",
			"export class actionExecute extends BaseHook {",
			"protected autoDtoFileName = '${1:payload_DTO_path}'; // DTO file name separated by (/)slashes for folder paths",
			"constructor(",
			" @InjectModel( ${3:modelName}, '${3:modelName}' )",
			" private readonly ${3:modelName}Model: typeof ${3:modelName}",
			" ) { super(); }",
			"",
			"async execute(previousData: QNATKIActionExecuteParams<${3:modelName},/** ${2:payload_DTO_class} */ any,/** ${4:user_DTO} */ any>): Promise<any> {",
			"// used for auto-generate DTO",
			"// this.checkAndGenerateDto(previousData.data,${2:payload_DTO_class});",
			"",
			"// previousData.data = await this.validateData(previousData.data,${2:payload_DTO_class});",
			"",
			"// your logic here",
			"$0",
			" return previousData;",
			"",
			"}",
			"}",
			"$0"
		],
		"description": "Snippet action execute"
	},
	"Snippet after action execute": {
		"prefix": "new_qnatk_after_action_execute",
		"body": [
			"import { Injectable } from '@nestjs/common';",
			"import { QNATKIAfterActionExecuteParams } from 'src/qnatk/src';",
			"import { BaseHook } from 'src/qnatk/src/hooks/base-hook';",
			"import { InjectModel } from '@nestjs/sequelize';",
			"// import { ${2:payload_DTO_class} } from './${1:payload_DTO_path}';",
			"@Injectable()",
			"export class afterActionExecute extends BaseHook {",
			"protected autoDtoFileName = '${1:payload_DTO_path}'; // DTO file name separated by (/)slashes for folder paths",
			"constructor(",
			" @InjectModel( ${3:modelName}, '${3:modelName}' )",
			" private readonly ${3:modelName}Model: typeof ${3:modelName}",
			" ) { super(); }",
			"",
			"async execute(previousData: QNATKIAfterActionExecuteParams<${3:modelName},/** ${2:payload_DTO_class} */ any,/** ${4:user_DTO} */ any>): Promise<any> {",
			"// used for auto-generate DTO",
			"// this.checkAndGenerateDto(previousData.data,${2:payload_DTO_class});",
			"",
			"// previousData.data = await this.validateData(previousData.data,${2:payload_DTO_class});",
			"",
			"// your logic here",
			"$0",
			" return previousData;",
			"",
			"}",
			"}",
			"$0"
		],
		"description": "Snippet action execute"
	},
	"Snippet before action execute with files": {
		"prefix": "new_qnatk_before_action_execute_with_files",
		"body": [
			"import { Injectable } from '@nestjs/common';",
			"import { QNATKIBeforeActionExecuteWithFilesParams } from 'src/qnatk/src';",
			"import { BaseHook } from 'src/qnatk/src/hooks/base-hook';",
			"import { InjectModel } from '@nestjs/sequelize';",
			"// import { ${2:payload_DTO_class} } from './${1:payload_DTO_path}';",
			"@Injectable()",
			"export class beforeActionExecute extends BaseHook {",
			"protected autoDtoFileName = '${1:payload_DTO_path}'; // DTO file name separated by (/)slashes for folder paths",
			"constructor(",
			" @InjectModel( ${3:modelName}, '${3:modelName}' )",
			" private readonly ${3:modelName}Model: typeof ${3:modelName}",
			" ) { super(); }",
			"",
			"async execute(previousData: QNATKIBeforeActionExecuteWithFilesParams<${3:modelName},/** ${2:payload_DTO_class} */ any,/** ${4:user_DTO} */ any>): Promise<any> {",
			"// used for auto-generate DTO",
			"// this.checkAndGenerateDto(previousData.data,${2:payload_DTO_class});",
			"",
			"// previousData.data = await this.validateData(previousData.data,${2:payload_DTO_class});",
			"",
			"// your logic here",
			"$0",
			" return previousData;",
			"",
			"}",
			"}",
			"$0"
		],
		"description": "Snippet before action execute with files"
	},
	"Snippet action execute with files": {
		"prefix": "new_qnatk_action_execute_with_files",
		"body": [
			"import { Injectable } from '@nestjs/common';",
			"import { QNATKIActionExecuteWithFilesParams } from 'src/qnatk/src';",
			"import { BaseHook } from 'src/qnatk/src/hooks/base-hook';",
			"import { InjectModel } from '@nestjs/sequelize';",
			"// import { ${2:payload_DTO_class} } from './${1:payload_DTO_path}';",
			"@Injectable()",
			"export class actionExecuteWithFiles extends BaseHook {",
			"protected autoDtoFileName = '${1:payload_DTO_path}'; // DTO file name separated by (/)slashes for folder paths",
			"constructor(",
			" @InjectModel( ${3:modelName}, '${3:modelName}' )",
			" private readonly ${3:modelName}Model: typeof ${3:modelName}",
			" ) { super(); }",
			"",
			"async execute(previousData: QNATKIActionExecuteWithFilesParams<${3:modelName},/** ${2:payload_DTO_class} */ any,/** ${4:user_DTO} */ any>): Promise<any> {",
			"// used for auto-generate DTO",
			"// this.checkAndGenerateDto(previousData.data,${2:payload_DTO_class});",
			"",
			"// previousData.data = await this.validateData(previousData.data,${2:payload_DTO_class});",
			"",
			"// your logic here",
			"$0",
			" return previousData;",
			"",
			"}",
			"}",
			"$0"
		],
		"description": "Snippet after action execute with files"
	},
	"Snippet after action execute with files": {
		"prefix": "new_qnatk_after_action_execute_with_files",
		"body": [
			"import { Injectable } from '@nestjs/common';",
			"import { QNATKIAfterActionExecuteWithFilesParams } from 'src/qnatk/src';",
			"import { BaseHook } from 'src/qnatk/src/hooks/base-hook';",
			"import { InjectModel } from '@nestjs/sequelize';",
			"// import { ${2:payload_DTO_class} } from './${1:payload_DTO_path}';",
			"@Injectable()",
			"export class AfterActionExecute extends BaseHook {",
			"protected autoDtoFileName = '${1:payload_DTO_path}'; // DTO file name separated by (/)slashes for folder paths",
			"constructor(",
			" @InjectModel( ${3:modelName}, '${3:modelName}' )",
			" private readonly ${3:modelName}Model: typeof ${3:modelName}",
			" ) { super(); }",
			"",
			"async execute(previousData: QNATKIAfterActionExecuteWithFilesParams<${3:modelName},/** ${2:payload_DTO_class} */ any,/** ${4:user_DTO} */ any>): Promise<any> {",
			"// used for auto-generate DTO",
			"// this.checkAndGenerateDto(previousData.data,${2:payload_DTO_class});",
			"",
			"// previousData.data = await this.validateData(previousData.data,${2:payload_DTO_class});",
			"",
			"// your logic here",
			"$0",
			" return previousData;",
			"",
			"}",
			"}",
			"$0"
		],
		"description": "Snippet after action execute with files"
	},
	"Snippet before bulk action execute": {
		"prefix": "new_qnatk_before_bulk_action_execute",
		"body": [
			"import { Injectable } from '@nestjs/common';",
			"import { QNATKIBeforeBulkActionExecuteParams } from 'src/qnatk/src';",
			"import { BaseHook } from 'src/qnatk/src/hooks/base-hook';",
			"// import { ${2:payload_DTO_class} } from './${1:payload_DTO_path}';",
			"@Injectable()",
			"export class beforeBulkActionExecute extends BaseHook {",
			"protected autoDtoFileName = '${1:payload_DTO_path}'; // DTO file name separated by (/)slashes for folder paths",
			"",
			"async execute(previousData: QNATKIBeforeBulkActionExecuteParams</** ${2:payload_DTO_class} */ any,/** ${4:user_DTO} */ any>): Promise<any> {",
			"// used for auto-generate DTO",
			"// this.checkAndGenerateDto(previousData.data,${2:payload_DTO_class});",
			"",
			"// previousData.data = await this.validateData(previousData.data,${2:payload_DTO_class});",
			"",
			"// your logic here",
			"$0",
			" return previousData;",
			"",
			"}",
			"}",
			"$0"
		],
		"description": "Snippet before bulk action execute with files"
	},
	"Print to console": {
		"prefix": "QnatkLogBy",
		"body": [
			"console.log('${1:message}', ${2:variable});",
			"console.log('')",
			"console.log('')'",
			"console.log('${2:message}', ${3:variable});",
			"$0"
		],
		"description": "Log output to console"
	},
	"snippet qnatk form": {
		"prefix": "qnatk useform",
		"body": [
			"import { useQuasar } from 'quasar';",
			"import { ref } from 'vue';",
			"",
			"const $q = useQuasar();",
			"",
			"const props = defineProps({",
			"action: {type: Object,required: true},",
			"closeDialog: {type: Function,required: true},",
			"record: {type: ${2:record_DTO},required: true},",
			"model: {type: String},",
			"});",
			"let url = '${1:useform_endpoint}';",
			"let initialValues = new ${2:record_DTO}()",
			"if (props.record.id) {",
			"initialValues = { ...initialValues, ...props.record };",
			"}",
			"const { values, errors, isLoading, validateAndSubmit, callbacks, updateUrl } = ${3:use_form_class}(url, initialValues, 'post');",
			"",
			"callbacks.onSuccess = (data) => { props.closeDialog(); return data; }",
			"",
			"callbacks.beforeSubmit = (data: typeof values.value) => {console.log(data);return data;};",
			"",
			"$0"
		],
		"description": "Log output to console"
	},
	"snippet qnatk q form": {
		"prefix": "qnatk qform",
		"body": [
			"<q-form @submit.prevent='validateAndSubmit' class='q-gutter-md'>",
			"<q-card-section>",
			"<h1 class=\"text-h6\">Add Partner</h1>",
			"</q-card-section>",
			"<q-card-section>",
			"<div class=\"row q-col-gutter-md\">",
			"<div class=\"col-6 q-pl-md\">",
			"<alphabeticInput v-model=\"values.lastName\" label=\"lastName\" />",
			"</div>",
			"</div>",
			"<div class=\"row justify-end q-pt-md\">",
			"<q-btn class=\"q-mr-md\" size=\"md\" :loading=\"isLoading\" label=\"Submit\" color=\"primary\" type=\"submit\" />",
			"<q-btn :loading=\"isLoading\" label=\"Cancle\" color=\"primary\" v-close-popup=\"true\" />""</div>",
			"</q-card-section>",
			"</q-form>"
		],
		"description": ""
	}
}